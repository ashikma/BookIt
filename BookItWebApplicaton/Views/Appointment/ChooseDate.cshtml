
@{
    ViewData["Title"] = "ChooseDate";
    Layout = "~/Views/Shared/View.cshtml";
}

<link href="~/content/styles/calander.css" rel="stylesheet" />
<div class="calendar">
    <div class="calendar-header">
        <span id="prev-month" style="cursor: pointer;">◀</span>
        <span id="current-month">March 2025</span>
        <span id="next-month" style="cursor: pointer;">▶</span>
    </div>
    <div class="calendar-day-names" id="calendar-day-names">
        <!-- Day names will be inserted here -->
    </div>
    <div class="calendar-days" id="calendar-days">

    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const calendarDays = document.getElementById("calendar-days");
        const calendarDayNames = document.getElementById("calendar-day-names");
        const prevMonthBtn = document.getElementById("prev-month");
        const nextMonthBtn = document.getElementById("next-month");
        const currentMonthEl = document.getElementById("current-month");

        let selectedDate = null;
        let currentDate = new Date();

        // ❌ Fully booked dates (can be loaded from a database)
        const fullyBookedDates = ["2025-03-10", "2025-03-15", "2025-03-22"];

        // string input = "24/09/2024"; // from DB
        // DateTime parsedDate = DateTime.ParseExact(input, "dd/MM/yyyy", null);
        // string output = parsedDate.ToString("yyyy-MM-dd");

        function isDateDisabled(year, month, day) {
            let date = new Date(year, month, day);
            let formattedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

            // 🚫 Disable Fridays (5) & Saturdays (6) + Fully booked days
            return date.getDay() === 5 || date.getDay() === 6 || fullyBookedDates.includes(formattedDate);
        }

        function updateCalendar() {
            calendarDays.innerHTML = "";
            calendarDayNames.innerHTML = "";
            let year = currentDate.getFullYear();
            let month = currentDate.getMonth();

            currentMonthEl.textContent = `${new Intl.DateTimeFormat('en-US', { month: 'long' }).format(currentDate)} ${year}`;

            let firstDayOfMonth = new Date(year, month, 1).getDay();
            let daysInMonth = new Date(year, month + 1, 0).getDate();

            // Insert short day names (Sun, Mon, Tue, etc.)
            const shortDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            shortDays.forEach(day => {
                let dayNameElement = document.createElement("div");
                dayNameElement.classList.add("day-name");
                dayNameElement.textContent = day;
                calendarDayNames.appendChild(dayNameElement);
            });

            // Insert the days of the month
            for (let i = 0; i < firstDayOfMonth; i++) {
                let emptyCell = document.createElement("div");
                calendarDays.appendChild(emptyCell);
            }

            for (let day = 1; day <= daysInMonth; day++) {
                let dayElement = document.createElement("div");
                dayElement.classList.add("day");
                dayElement.textContent = day;

                if (isDateDisabled(year, month, day)) {
                    dayElement.classList.add("disabled");
                } else {
                    dayElement.classList.add("selectable");
                    dayElement.addEventListener("click", () => {
                        if (!dayElement.classList.contains("disabled")) {
                            document.querySelectorAll(".day").forEach(d => d.classList.remove("selected"));
                            dayElement.classList.add("selected");
                        }
                    });
                }

                calendarDays.appendChild(dayElement);
            }
        }

        prevMonthBtn.addEventListener("click", () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
        });

        nextMonthBtn.addEventListener("click", () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
        });

        updateCalendar();
    });
</script>
